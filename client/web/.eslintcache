[{"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/App.tsx":"1","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/ChangePassword/ChangePassword.tsx":"2","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/CreateInstance/CreateInstance.tsx":"3","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/index.tsx":"4","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/reportWebVitals.ts":"5","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/Dashboard/Components/Dashboard.tsx":"6","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/Dashboard/Components/Instance.tsx":"7","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/Dashboard/Components/InstanceList.tsx":"8","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/Dashboard/Container/InstanceContainer.tsx":"9","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/AppState.tsx":"10","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/model/Template.tsx":"11","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/model/ServerObject.tsx":"12","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/model/Flavor.tsx":"13","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/api/server/ServerRepository.tsx":"14","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/Dashboard/Container/InstanceListContainer.tsx":"15","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/App.tsx":"16","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/ChangePassword/ChangePassword.tsx":"17","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/api/server/ServerRepository.tsx":"18","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/model/ServerObject.tsx":"19","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Dashboard/Components/Instance.tsx":"20","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Dashboard/Components/Dashboard.tsx":"21","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Login/Login.tsx":"22","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Dashboard/Container/InstanceListContainer.tsx":"23","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/AppState.tsx":"24","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Dashboard/Components/InstanceList.tsx":"25","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/model/Flavor.tsx":"26","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/index.tsx":"27","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/model/Quota.tsx":"28","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/CreateInstance/CreateInstance.tsx":"29","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/reportWebVitals.ts":"30","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/api/user/UserRepository.tsx":"31","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/model/UserInfo.tsx":"32","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Dashboard/Container/InstanceContainer.tsx":"33","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/model/Template.tsx":"34","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Login/Components/LoginForm.tsx":"35"},{"size":662,"mtime":1611846803175,"results":"36","hashOfConfig":"37"},{"size":4169,"mtime":1610980258610,"results":"38","hashOfConfig":"37"},{"size":4363,"mtime":1610978780295,"results":"39","hashOfConfig":"37"},{"size":743,"mtime":1609487438913,"results":"40","hashOfConfig":"37"},{"size":425,"mtime":1610639864380,"results":"41","hashOfConfig":"37"},{"size":1192,"mtime":1610868443971,"results":"42","hashOfConfig":"37"},{"size":3389,"mtime":1610975497463,"results":"43","hashOfConfig":"37"},{"size":1491,"mtime":1610977779463,"results":"44","hashOfConfig":"37"},{"size":378,"mtime":1610873496031,"results":"45","hashOfConfig":"37"},{"size":1261,"mtime":1610980204834,"results":"46","hashOfConfig":"37"},{"size":343,"mtime":1610640425735,"results":"47","hashOfConfig":"37"},{"size":2231,"mtime":1611846803178,"results":"48","hashOfConfig":"37"},{"size":171,"mtime":1610640425732,"results":"49","hashOfConfig":"37"},{"size":5304,"mtime":1610888494878,"results":"50","hashOfConfig":"37"},{"size":475,"mtime":1610878819765,"results":"51","hashOfConfig":"37"},{"size":1228,"mtime":1615000009930,"results":"52","hashOfConfig":"53"},{"size":4896,"mtime":1614865986176,"results":"54","hashOfConfig":"53"},{"size":6538,"mtime":1614870916194,"results":"55","hashOfConfig":"53"},{"size":2535,"mtime":1614865076724,"results":"56","hashOfConfig":"53"},{"size":5621,"mtime":1614936037958,"results":"57","hashOfConfig":"53"},{"size":2073,"mtime":1614936510891,"results":"58","hashOfConfig":"53"},{"size":501,"mtime":1614612828040,"results":"59","hashOfConfig":"53"},{"size":474,"mtime":1611846803182,"results":"60","hashOfConfig":"53"},{"size":1640,"mtime":1614440048216,"results":"61","hashOfConfig":"53"},{"size":1417,"mtime":1614862848850,"results":"62","hashOfConfig":"53"},{"size":171,"mtime":1611846803177,"results":"63","hashOfConfig":"53"},{"size":754,"mtime":1611846803177,"results":"64","hashOfConfig":"53"},{"size":258,"mtime":1611846803178,"results":"65","hashOfConfig":"53"},{"size":5614,"mtime":1614936251175,"results":"66","hashOfConfig":"53"},{"size":425,"mtime":1611846803183,"results":"67","hashOfConfig":"53"},{"size":3889,"mtime":1614862323727,"results":"68","hashOfConfig":"53"},{"size":230,"mtime":1611846803179,"results":"69","hashOfConfig":"53"},{"size":379,"mtime":1611846803182,"results":"70","hashOfConfig":"53"},{"size":343,"mtime":1611846803178,"results":"71","hashOfConfig":"53"},{"size":3587,"mtime":1615116452831,"results":"72","hashOfConfig":"53"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1wdxlzr",{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"24n4li",{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"107"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"107"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"107"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"107"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"107"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"107"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"107"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"107"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"107"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/App.tsx",["155"],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/ChangePassword/ChangePassword.tsx",["156","157"],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/CreateInstance/CreateInstance.tsx",["158","159"],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/index.tsx",["160","161","162","163","164","165","166"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Redirect, Route, Router, Switch } from 'react-router';\nimport Login from './pages/Login/Login';\nimport Dashboard from './pages/Dashboard/Dashboard';\nimport { createBrowserHistory } from \"history\";\n\nconst hist = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/reportWebVitals.ts",[],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/Dashboard/Components/Dashboard.tsx",["167"],"\n\nimport React, { Component } from 'react'\nimport 'antd/dist/antd.css';\nimport '../../../index.css';\nimport './Dashboard.less';\nimport ChangePassword from '../../ChangePassword/ChangePassword';\nimport { Layout, Button, Row, Col} from 'antd';\nimport CSS from 'csstype';\nimport { InstanceListContainer } from '../Container/InstanceListContainer';\n\nconst { Header, Footer, } = Layout;\nconst mypageStyle: CSS.Properties ={\n    margin: '0 auto',\n    float: 'right',\n    marginRight: '5px'\n}\n\nconst Dashboard = () => {\n    return (\n        <>\n            <Layout className=\"layout\">\n                <Header>\n                <div className=\"logo\" />\n                  <Row style={mypageStyle}>\n                    <Col span={12}>\n                      <ChangePassword></ChangePassword>\n                    </Col>\n                    <Col span={12}>\n                      <Button danger >로그아웃</Button>\n                    </Col>\n                  </Row>\n                </Header>\n                <InstanceListContainer/>\n                <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n            </Layout>\n        </>\n    );\n}\n\nexport default Dashboard;","/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/Dashboard/Components/Instance.tsx",["168","169"],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/Dashboard/Components/InstanceList.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/Dashboard/Container/InstanceContainer.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/AppState.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/model/Template.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/model/ServerObject.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/model/Flavor.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/api/server/ServerRepository.tsx",["170","171"],"/Users/jang-wonpyo/workplace/sidejobs/Jupynetes/client/web/src/pages/Dashboard/Container/InstanceListContainer.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/App.tsx",[],["172","173"],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/ChangePassword/ChangePassword.tsx",["174","175","176","177","178"],"import React, { Component } from 'react';\nimport 'antd/dist/antd.css';\nimport '../../index.css';\nimport { Button, Modal, Form, Input } from 'antd';\nimport CSS from 'csstype';\nimport Password from 'antd/lib/input/Password';\nimport { UserRepository } from '../../api/user/UserRepository';\n\nconst changePasswordButtonStyle: CSS.Properties = {\n  backgroundColor: 'rgba(255, 255, 255, 1)',\n  border: 'solid',\n  borderColor: 'rgba(78, 185, 242,1)',\n};\n\nconst layout = {\n  labelCol: {\n    span: 6,\n  },\n  wrapperCol: {\n    span: 12,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 6,\n    span: 12,\n  },\n};\n\nconst onFinishFailed = () => {};\n\nconst ChangePassword = (props: any) => {\n  const [visible, setVisible] = React.useState(false);\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\n  const [modalText, setModalText] = React.useState('Content of the modal');\n  const [username, setUsername] = React.useState('');\n  const [currentPassword, setCurrentPassword] = React.useState('');\n  const [newPassword, setNewPassword] = React.useState('');\n  const [newPasswordConfirm, setNewPasswordConfirm] = React.useState('');\n\n  const changeUsernameHandler = (event: any) => {\n    console.log('event.target.value : ' + event.target.value);\n    setUsername(event.target.value);\n    console.log('username: ' + username);\n  };\n\n  const changeCurrentPasswordHandler = (event: any) => {\n    console.log('event.target.value : ' + event.target.value);\n    setCurrentPassword(event.target.value);\n    console.log('currentPassword: ' + currentPassword);\n  };\n\n  const changeNewPasswordHandler = (event: any) => {\n    console.log('event.target.value : ' + event.target.value);\n    setNewPassword(event.target.value);\n    console.log('newPassword: ' + newPassword);\n  };\n\n  const changeNewPasswordConfirmHandler = (event: any) => {\n    console.log('event.target.value : ' + event.target.value);\n    setNewPasswordConfirm(event.target.value);\n    console.log('newPasswordConfirm: ' + newPasswordConfirm);\n  };\n\n  const showModal = () => {\n    setVisible(true);\n  };\n\n  const handleOk = () => {\n    console.log('newPasswrd: ' + newPassword);\n    console.log('newPasswordConfirm: ' + newPasswordConfirm);\n    if (newPassword !== newPasswordConfirm) {\n      alert('새 패스워드와 새 패스워드 확인이 일치하지 않습니다.');\n      return;\n    }\n\n    let userRepository = new UserRepository();\n\n    let result = userRepository.postUser(currentPassword, newPassword);\n\n    setModalText('The modal will be closed after two seconds');\n    setConfirmLoading(true);\n    setTimeout(() => {\n      setVisible(false);\n      setConfirmLoading(false);\n    }, 2000);\n    return result;\n  };\n\n  const handleCancel = () => {\n    console.log('Clicked cancel button');\n    setVisible(false);\n  };\n\n  console.log('change password username : ' + props.username);\n\n  return (\n    <div>\n      <Button style={changePasswordButtonStyle} onClick={showModal}>\n        비밀번호수정\n      </Button>\n      <Modal\n        title=\"비밀번호 수정\"\n        visible={visible}\n        onOk={handleOk}\n        confirmLoading={confirmLoading}\n        onCancel={handleCancel}\n      >\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{\n            remember: true,\n          }}\n        >\n          <Form.Item\n            label=\"아이디\"\n            name=\"username\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your username!',\n              },\n            ]}\n          >\n            <Input\n              disabled={true}\n              onChange={changeUsernameHandler}\n              defaultValue={props.username}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"기존 비밀번호\"\n            name=\"passwordOriginal\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your password!',\n              },\n            ]}\n          >\n            <Input.Password onChange={changeCurrentPasswordHandler} />\n          </Form.Item>\n          <Form.Item\n            label=\"변경할 비밀번호\"\n            name=\"passwordNew\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your password!',\n              },\n            ]}\n          >\n            <Input.Password onChange={changeNewPasswordHandler} />\n          </Form.Item>\n          <Form.Item\n            label=\"비밀번호 재입력\"\n            name=\"passwordRetype\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your password!',\n              },\n            ]}\n          >\n            <Input.Password onChange={changeNewPasswordConfirmHandler} />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default ChangePassword;\n","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/api/server/ServerRepository.tsx",["179","180","181","182","183","184"],"import { plainToClass } from 'class-transformer';\nimport { ServerResponse } from 'http';\nimport { client } from '../../App';\nimport { ServerObject } from '../../model/ServerObject';\n\nconst isTest = false;\nconst axios = require('axios').default;\n\nexport class ServerRepository {\n  provider: ServerProvider;\n\n  constructor() {\n    this.provider = new ServerProvider();\n  }\n\n  async getServers() {\n    let result = await this.provider.getServers();\n    if (result === undefined) {\n      return;\n    } else {\n      let servers = plainToClass(ServerObject, result.data as any[]);\n      return servers;\n    }\n  }\n\n  async postServer(serverObject: any) {\n    let result = await this.provider.postServer(serverObject);\n    if (result === undefined) {\n      alert('인스턴스 생성에 실패했습니다.');\n      return;\n    } else {\n      let server = plainToClass(ServerObject, result.data);\n      return server;\n    }\n  }\n\n  //   async getServer() {\n  //     let result: any = await this.provider.getServer();\n\n  //     return null;\n  //   }\n\n  async deleteServer(serverObject: ServerObject) {\n    let result: boolean = await this.provider.deleteServer(serverObject);\n    return result;\n  }\n}\n\nclass ServerProvider {\n  constructor() {}\n\n  async getServers() {\n    axios.defaults.withCredentials = true;\n    var response;\n    try {\n      response = await client.get('/server', {\n        withCredentials: true,\n        headers: { crossDomain: true, 'Content-Type': 'application/json' },\n      });\n    } catch (_) {\n      alert(_);\n      return;\n    }\n    return response;\n  }\n\n  async postServer(serverObject: any) {\n    axios.defaults.withCredentials = true;\n    var response;\n\n    try {\n      response = await client.post('/server', serverObject, {\n        withCredentials: true,\n        headers: { crossDomain: true, 'Content-Type': 'application/json' },\n      });\n    } catch (_) {}\n    if (response === undefined) {\n    } else {\n      alert(response.data);\n    }\n\n    return response;\n  }\n\n  async deleteServer(serverObject: ServerObject) {\n    axios.defaults.withCredentials = true;\n    var response;\n\n    try {\n      response = await client.delete(`/server/${serverObject.id}`, {\n        withCredentials: true,\n        headers: { crossDomain: true, 'Content-Type': 'application/json' },\n      });\n    } catch (_) {\n      alert('삭제에 실패했습니다.');\n      return false;\n    }\n    return true;\n  }\n}\n\nclass ServerFakeProvider {\n  constructor() {}\n\n  getServers(): any {\n    let data = `[\n            {\n                \"id\": \"1\",\n                \"name\": \"사과서버\",\n                \"description\": \"사과서버입니다.\",\n                \"template\": {\n                \"id\": 0,\n                \"name\": \"사과템플릿\",\n                \"description\": \"사과템플릿입니다.\",\n                \"bdoy\": \"string\",\n                \"variables\": [\n                    {\n                    \"name\": \"string\",\n                    \"value\": \"string\"\n                    }\n                ]\n                },\n                \"flavor\": {\n                \"cpu\": 55,\n                \"memory\": 22,\n                \"nvidia_gpu\": 44\n                },\n                \"created_at\": \"2021-01-02T08:30:00Z\",\n                \"status\": \"running\",\n                \"message\": \"string\",\n                \"last_transition_time\": \"2021-01-02T08:30:00Z\",\n                \"last_probe_time\": \"2021-01-02T08:30:00Z\",\n                \"owner\": [\n                \"2016920036\",\n                \"admin\"\n                ]\n            },\n            {\n                \"id\": \"2\",\n                \"name\": \"오렌지서버\",\n                \"description\": \"사과서버입니다.\",\n                \"template\": {\n                \"id\": 0,\n                \"name\": \"사과템플릿\",\n                \"description\": \"사과템플릿입니다.\",\n                \"bdoy\": \"string\",\n                \"variables\": [\n                    {\n                    \"name\": \"string\",\n                    \"value\": \"string\"\n                    }\n                ]\n                },\n                \"flavor\": {\n                \"cpu\": 55,\n                \"memory\": 22,\n                \"nvidia_gpu\": 44\n                },\n                \"created_at\": \"2021-01-11T08:30:00Z\",\n                \"status\": \"error\",\n                \"message\": \"string\",\n                \"last_transition_time\": \"2021-01-11T08:30:00Z\",\n                \"last_probe_time\": \"2021-01-11T08:30:00Z\",\n                \"owner\": [\n                \"2016920036\",\n                \"admin\"\n                ]\n            }\n        ]`;\n\n    let json = JSON.parse(data);\n    let servers = plainToClass(ServerObject, json);\n    return servers;\n  }\n\n  postServer(): string {\n    return `{\n            \"id\": \"string\",\n            \"name\": \"string\",\n            \"description\": \"string\",\n            \"template\": {\n                \"id\": 0,\n                \"name\": \"string\",\n                \"description\": \"string\",\n                \"bdoy\": \"string\",\n                \"variables\": [\n                {\n                    \"name\": \"string\",\n                    \"value\": \"string\"\n                }\n                ]\n            },\n            \"flavor\": {\n                \"cpu\": 0,\n                \"memory\": 0,\n                \"nvidia_gpu\": 0\n            },\n            \"created_at\": \"2021-01-30T08:30:00Z\",\n            \"status\": \"running\",\n            \"message\": \"string\",\n            \"last_transition_time\": \"2021-01-30T08:30:00Z\",\n            \"last_probe_time\": \"2021-01-30T08:30:00Z\",\n            \"owner\": [\n                \"2016920036\",\n                \"admin\"\n            ]\n            }`;\n  }\n\n  getServer(): string {\n    return `{\n            \"id\": \"string\",\n            \"name\": \"string\",\n            \"description\": \"string\",\n            \"template\": {\n                \"id\": 0,\n                \"name\": \"string\",\n                \"description\": \"string\",\n                \"bdoy\": \"string\",\n                \"variables\": [\n                {\n                    \"name\": \"string\",\n                    \"value\": \"string\"\n                }\n                ]\n            },\n            \"flavor\": {\n                \"cpu\": 0,\n                \"memory\": 0,\n                \"nvidia_gpu\": 0\n            },\n            \"created_at\": \"2021-01-30T08:30:00Z\",\n            \"status\": \"running\",\n            \"message\": \"string\",\n            \"last_transition_time\": \"2021-01-30T08:30:00Z\",\n            \"last_probe_time\": \"2021-01-30T08:30:00Z\",\n            \"owner\": [\n                \"2016920036\",\n                \"admin\"\n            ]\n        }`;\n  }\n}\n","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/model/ServerObject.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Dashboard/Components/Instance.tsx",["185","186","187","188","189","190"],"import React, { CSSProperties, FC, useState } from 'react';\nimport { Card, Row, Col, Button, Popover } from 'antd';\nimport { ServerObject, ServerStatus } from '../../../model/ServerObject';\nimport './Instance.css';\nimport appState from '../../../AppState';\nimport { useObserver } from 'mobx-react';\nimport { useHistory } from 'react-router';\nimport { ServerRepository } from '../../../api/server/ServerRepository';\nimport Icon, { InfoCircleOutlined } from '@ant-design/icons';\n\nconst gridStyle: CSSProperties = {\n  backgroundColor: 'rgba(230, 230, 200, 1)',\n  textAlign: 'center',\n  margin: '10px 10px 10px 10px',\n  borderRadius: '50px',\n  border: 'solid',\n  borderColor: 'rgba(230, 230, 200, 1)',\n};\n\nconst SelectedGridStyle: CSSProperties = {\n  backgroundColor: 'rgba(230, 230, 200, 1)',\n  textAlign: 'center',\n  margin: '10px 10px 10px 10px',\n  borderRadius: '50px',\n  border: 'solid',\n  borderColor: 'rgba(20, 230, 200, 1)',\n};\n\nconst infoBodyStyle: CSSProperties = {\n  backgroundColor: 'rgba(230, 230, 200, 1)',\n  borderColor: 'rgba(120, 70, 70, 1)',\n  border: 'solid',\n  borderRadius: '15px',\n  textAlign: 'left',\n  padding: '10px 10px 10px 10px',\n  margin: '0 0 20px 0',\n};\n\nconst infoUnit: CSSProperties = {\n  fontSize: '14px',\n  fontWeight: 'bold',\n};\n\nconst instanceTitleStyle: CSSProperties = {\n  fontSize: '25px',\n  fontWeight: 'normal',\n  lineHeight: '45px',\n};\n\nconst style: CSSProperties = { background: '#0092ff', padding: '8px 0' };\n\nconst statusStyle: CSSProperties = {\n  height: '25px',\n  width: '25px',\n  backgroundColor: '#F00',\n  borderRadius: '50%',\n  display: 'inline-block',\n};\n\ninterface InstanceProps {\n  serverData: ServerObject;\n}\n\nconst Instance: FC<InstanceProps> = (props) => {\n  const history = useHistory();\n  const [isSelected, setIsSelected] = useState(false);\n\n  const onClickAcessToServerHandler = (_: any) => {\n    let linkUrl = `http://jupy-${props.serverData.name}.iwanhae.kr/`;\n    alert(linkUrl);\n    window.open(linkUrl);\n  };\n  const onClickDeleteServerHandler = async (_: any) => {\n    let serverRepository = new ServerRepository();\n\n    let result = await serverRepository.deleteServer(props.serverData);\n    if (result === true) {\n      appState.deleteServer(props.serverData);\n    }\n  };\n\n  return useObserver(() => {\n    const renderInstanceStatus = (serverData: ServerStatus): string => {\n      switch (serverData) {\n        case ServerStatus.ERROR: {\n          return 'redCircle';\n        }\n        case ServerStatus.INITIALIZING: {\n          return 'yellowCircle';\n        }\n        case ServerStatus.RUNNING: {\n          return 'greenCircle';\n        }\n        case ServerStatus.STOPPED: {\n          return 'greyCircle';\n        }\n        case ServerStatus.UNKKWON: {\n          return 'blackCircle';\n        }\n        default: {\n          return '';\n        }\n      }\n    };\n\n    console.log(\n      'status: ' + renderInstanceStatus(props.serverData.getStatus()),\n    );\n\n    const index = appState.servers.indexOf(props.serverData);\n\n    const serverData = props.serverData;\n\n    const text = <span>Title</span>;\n    const cpuUnitInfo = (\n      <div>\n        <p>cpu size in micro cores (mcore), 1000mcore = 1core</p>\n      </div>\n    );\n\n    const memUnitInfo = (\n      <div>\n        <p>memory size in MiB, 1024MiB = 1GiB</p>\n      </div>\n    );\n\n    return (\n      <div\n        className=\"ant-col ant-col-xs-24 ant-col-xl-8\"\n        onClick={() => {\n          appState.togleSelect(serverData);\n          setIsSelected(serverData.isSelected);\n        }}\n      >\n        <Card\n          title={serverData.name}\n          headStyle={instanceTitleStyle}\n          style={isSelected ? SelectedGridStyle : gridStyle}\n        >\n          <div style={infoBodyStyle}>\n            <Row>\n              <p>{serverData.getFormmatedCreatedAt()}</p>\n              <p style={infoUnit}> &nbsp;에 생성 됨</p>\n            </Row>\n            <Row>\n              <p>{serverData.getNDaysAgo()}</p>\n              <p style={infoUnit}> &nbsp;째 구동중 </p>\n            </Row>\n            <Row>\n              <p>{serverData.flavor.cpu}</p>\n              <p style={infoUnit}> &nbsp;microCore</p>\n              <Popover\n                placement=\"rightBottom\"\n                content={cpuUnitInfo}\n                trigger=\"hover\"\n              >\n                <InfoCircleOutlined />\n              </Popover>\n            </Row>\n            <Row>\n              <p>{serverData.flavor.memory}</p>\n              <p style={infoUnit}> &nbsp;MiB</p>\n              <Popover\n                placement=\"rightBottom\"\n                content={memUnitInfo}\n                trigger=\"hover\"\n              >\n                <InfoCircleOutlined />\n              </Popover>\n            </Row>\n            <Row>\n              <p>{serverData.flavor.nvidia_gpu} </p>\n              <p style={infoUnit}> &nbsp;gpu_unit</p>\n            </Row>\n          </div>\n          <Row gutter={16}>\n            <Col className=\"gutter-row\" span={6}>\n              <span\n                className={renderInstanceStatus(props.serverData.getStatus())}\n              ></span>\n            </Col>\n            <Col className=\"gutter-row\" span={10}></Col>\n            <Col className=\"gutter-row\" span={2}>\n              <Button onClick={onClickDeleteServerHandler} danger>\n                삭제\n              </Button>\n            </Col>\n            <Col className=\"gutter-row\" span={1}></Col>\n            <Col className=\"gutter-row\" span={2}>\n              <Button onClick={onClickAcessToServerHandler}>접속</Button>\n            </Col>\n          </Row>\n        </Card>\n      </div>\n    );\n  });\n};\n\nexport default Instance;\n","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Dashboard/Components/Dashboard.tsx",["191"],"import React, { useCallback, useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport '../../../index.css';\nimport './Dashboard.less';\nimport ChangePassword from '../../ChangePassword/ChangePassword';\nimport { Layout, Button } from 'antd';\nimport CSS from 'csstype';\nimport { InstanceListContainer } from '../Container/InstanceListContainer';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { UserRepository } from '../../../api/user/UserRepository';\n\nconst { Footer } = Layout;\nconst mypageStyle: CSS.Properties = {\n  margin: 'auto',\n  marginRight: '5px',\n  width: '100%',\n  display: 'grid',\n  gridTemplateColumns: '1fr 15fr 1fr 1fr',\n  backgroundColor: 'rgba(149, 206, 237, 1)',\n  height: '50px',\n};\n\nconst logoutButtonStyle: CSS.Properties = {\n  backgroundColor: 'rgba(255, 255, 255, 1)',\n  border: 'solid',\n  borderColor: 'rgba(78, 185, 242,1)',\n};\n\nconst buttonArea: CSS.Properties = {\n  fontSize: '14px',\n  fontWeight: 'bold',\n  marginTop: 'auto',\n  marginBottom: 'auto',\n};\n\nconst Dashboard = (props: any) => {\n  const history = useHistory();\n  const location: any = useLocation();\n  const handleOnClickLogout = useCallback(async () => {\n    let userRepository = new UserRepository();\n    let result = await userRepository.getLogout();\n    if (result === true) {\n      history.push('/login');\n    }\n  }, [history]);\n\n  console.log('wow');\n\n  console.log(location.state.userId);\n\n  return (\n    <>\n      <Layout>\n        <div style={mypageStyle}>\n          <div style={buttonArea}>{location.state.userId}</div>\n          <div style={buttonArea}></div>\n          <div style={buttonArea}>\n            <ChangePassword username={location.state.userId}></ChangePassword>\n          </div>\n          <div style={buttonArea}>\n            <Button style={logoutButtonStyle} onClick={handleOnClickLogout}>\n              로그아웃\n            </Button>\n          </div>\n        </div>\n        <InstanceListContainer />\n        <Footer style={{ textAlign: 'center' }}>Jupynetes ©2021</Footer>\n      </Layout>\n    </>\n  );\n};\n\nexport default Dashboard;\n","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Login/Login.tsx",["192","193","194"],"import 'antd/dist/antd.css';\nimport '../../index.css';\nimport './Login.css';\n\nimport { Typography, Layout, Space } from 'antd';\nimport LoginForm from './Components/LoginForm';\n\nconst { Title } = Typography;\n\nconst Login = () => {\n  const children = [\n    // <Title className=\"Title\">\n    //   <h1 className=\"Title\">Jupynetes</h1>\n    // </Title>,\n    <div style={{ height: '3rem' }}></div>,\n    <LoginForm />,\n  ];\n\n  return (\n    <>\n      <div>{children}</div>\n    </>\n  );\n};\n\nexport default Login;\n","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Dashboard/Container/InstanceListContainer.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/AppState.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Dashboard/Components/InstanceList.tsx",["195","196"],"import React, { FC } from 'react';\nimport { Card, Row, Col } from 'antd';\nimport CreateInstance from '../../CreateInstance/CreateInstance';\nimport appState from '../../../AppState';\nimport { ServerObject } from '../../../model/ServerObject';\nimport InstanceContainer from '../Container/InstanceContainer';\nimport { useObserver } from 'mobx-react';\nimport CSS from 'csstype';\n\nconst InstanceList: FC<Object> = () => {\n  const myInstacneTitle: CSS.Properties = {\n    fontSize: '30px',\n    fontWeight: 'normal',\n    lineHeight: '45px',\n  };\n\n  return useObserver(() => {\n    return (\n      <>\n        <div id=\"test\">\n          <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n        </div>\n        <div id=\"test\">\n          <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n        </div>\n        <Row gutter={16}>\n          <Col className=\"gutter-row\" span={6}></Col>\n          <Col className=\"gutter-row\" span={6}></Col>\n          <Col className=\"gutter-row\" span={6}></Col>\n          <Col className=\"gutter-row\" span={6}>\n            <CreateInstance></CreateInstance>\n          </Col>\n        </Row>\n        <p style={myInstacneTitle}>내 인스턴스 목록</p>\n        <div className=\"ant-row\">\n          {appState.servers.map(function (item: any) {\n            return <InstanceContainer serverData={item}></InstanceContainer>;\n          })}\n        </div>\n      </>\n    );\n  });\n};\n\nexport default InstanceList;\n","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/model/Flavor.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/index.tsx",["197","198","199","200","201","202","203"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Redirect, Route, Router, Switch } from 'react-router';\nimport Login from './pages/Login/Login';\nimport Dashboard from './pages/Dashboard/Components/Dashboard';\nimport { createBrowserHistory } from \"history\";\n\nconst hist = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/model/Quota.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/CreateInstance/CreateInstance.tsx",["204","205"],"import React from 'react';\nimport 'antd/dist/antd.css';\nimport '../../index.css';\nimport { Button, Modal, Form, Input, InputNumber } from 'antd';\nimport CSS from 'csstype';\nimport { ServerRepository } from '../../api/server/ServerRepository';\nimport appState from '../../AppState';\n\nconst mypageStyle: CSS.Properties = {\n  margin: '1rem',\n  float: 'right',\n};\n\nconst layout = {\n  labelCol: {\n    span: 6,\n  },\n  wrapperCol: {\n    span: 12,\n  },\n};\n\nconst onFinish = (values: String) => {\n  console.log('Success:', values);\n};\n\nconst onFinishFailed = () => {};\n\nconst CreateInstance = () => {\n  const [visible, setVisible] = React.useState(false);\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\n  const [modalText, setModalText] = React.useState('Content of the modal');\n  const [serverName, setServerName] = React.useState('');\n  const [serverDesc, setServerDesc] = React.useState('');\n  const [allocatedCPU, setAllocatedCPU] = React.useState(0);\n  const [allocatedMem, setAllocatedMem] = React.useState(0);\n  const [allocatedGpu, setAllocatedGpu] = React.useState(0);\n\n  const changeServerNameHandler = (event: any) => {\n    console.log('event.target.value : ' + event.target.value);\n    setServerName(event.target.value);\n    console.log('serverName: ' + serverName);\n  };\n\n  const changeServerDescHandler = (event: any) => {\n    console.log('event.target.value : ' + event.target.value);\n    setServerDesc(event.target.value);\n    console.log('serverDesc: ' + serverDesc);\n  };\n\n  const changeAllocatedCpuHandler = (event: any) => {\n    console.log('event.target.value : ' + event);\n    setAllocatedCPU(event);\n    console.log('allocatedCpu: ' + allocatedCPU);\n  };\n\n  const changeAllocatedMemHandler = (event: any) => {\n    console.log('event.target.value : ' + event);\n    setAllocatedMem(event);\n    console.log('allocatedMem: ' + allocatedMem);\n  };\n\n  const changeAllocatedGpuHandler = (event: any) => {\n    console.log('event.target.value : ' + event);\n    setAllocatedGpu(event);\n    console.log('allocatedMem: ' + allocatedGpu);\n  };\n\n  const showModal = () => {\n    setVisible(true);\n  };\n\n  const handleOk = async () => {\n    if (allocatedCPU > 512) {\n      alert('최대 CPU는 512 micro core 이하입니다.');\n      return;\n    }\n\n    if (allocatedMem > 512) {\n      alert('최대 메모리는 512 MiB 이하입니다.');\n      return;\n    }\n\n    if (allocatedGpu > 512) {\n      alert('최대 GPU는 2 unit 이하입니다.');\n      return;\n    }\n\n    let newServerObject = {\n      name: serverName,\n      description: serverDesc,\n      template_id: 4,\n      template_variables: [\n        {\n          name: 'good',\n          value: 'world',\n        },\n      ],\n      flavor: {\n        cpu: allocatedCPU,\n        memory: allocatedMem,\n        nvidia_gpu: 100,\n      },\n    };\n\n    let serverRepository = new ServerRepository();\n\n    let result = await serverRepository.postServer(newServerObject);\n\n    setServerName('');\n    setServerDesc('');\n    setAllocatedCPU(0);\n    setAllocatedGpu(0);\n    setAllocatedMem(0);\n    setConfirmLoading(true);\n    if (result !== undefined) {\n      appState.addServer(result);\n    }\n\n    setVisible(false);\n    setConfirmLoading(false);\n  };\n\n  const handleCancel = () => {\n    console.log('Clicked cancel button');\n    setVisible(false);\n  };\n\n  return (\n    <>\n      <Button danger style={mypageStyle} onClick={showModal}>\n        인스턴스생성+\n      </Button>\n      <Modal\n        title=\"인스턴스 생성\"\n        visible={visible}\n        onOk={handleOk}\n        confirmLoading={confirmLoading}\n        onCancel={handleCancel}\n      >\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{\n            remember: true,\n          }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"서버이름\"\n            name=\"servername\"\n            rules={[\n              {\n                required: true,\n                message: '서버명을 입력해 주세요.',\n              },\n            ]}\n          >\n            <Input onChange={changeServerNameHandler} />\n          </Form.Item>\n          <Form.Item\n            label=\"서버설명\"\n            name=\"description\"\n            rules={[\n              {\n                required: true,\n                message: '간단한 설명을 입력해 주세요.',\n              },\n            ]}\n          >\n            <Input onChange={changeServerDescHandler} />\n          </Form.Item>\n          <Form.Item\n            label=\"nCPU\"\n            name=\"nCPU\"\n            rules={[\n              {\n                required: true,\n                message: 'CPU 사양을 입력해 주세요.',\n              },\n            ]}\n          >\n            <InputNumber onChange={changeAllocatedCpuHandler} />\n          </Form.Item>\n          <Form.Item\n            label=\"Mem\"\n            name=\"Mem\"\n            rules={[\n              {\n                required: true,\n                message: 'Mem 사양을 입력해 주세요.',\n              },\n            ]}\n          >\n            <InputNumber onChange={changeAllocatedMemHandler} />\n          </Form.Item>\n          <Form.Item\n            label=\"nvidia_gpu\"\n            name=\"nvidia_gpu\"\n            rules={[\n              {\n                required: true,\n                message: 'nvidia_gpu 사양을 입력해 주세요.',\n              },\n            ]}\n          >\n            <InputNumber onChange={changeAllocatedGpuHandler} />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n\nexport default CreateInstance;\n","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/reportWebVitals.ts",[],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/api/user/UserRepository.tsx",["206","207","208"],"import { plainToClass } from 'class-transformer';\nimport { assert } from 'console';\nimport { client } from '../../App';\nimport { UserInfo } from '../../model/UserInfo';\nconst axios = require('axios').default;\n\nexport class UserRepository {\n  provider: UserFakeProvider;\n\n  constructor() {\n    this.provider = new UserFakeProvider();\n  }\n\n  async getAdminUser() {\n    let result: string = await this.provider.getAdminUser();\n    let json = JSON.parse(result);\n    let users = plainToClass(UserInfo, json);\n    return users;\n  }\n\n  async getUser() {\n    axios.defaults.withCredentials = true;\n    var response;\n    try {\n      response = await client.get('/user', {\n        withCredentials: true,\n        headers: { crossDomain: true, 'Content-Type': 'application/json' },\n      });\n    } catch (_) {\n      return;\n    }\n\n    let userInfo = plainToClass(UserInfo, response.data);\n    return userInfo;\n  }\n\n  async postUser(password: string, newPassword: string) {\n    axios.defaults.withCredentials = true;\n    var response;\n    console.log('id ; ' + password);\n    console.log('password ; ' + newPassword);\n    try {\n      response = await client.post(\n        '/user',\n        {\n          password: password,\n          new_password: newPassword,\n        },\n        {\n          withCredentials: true,\n          headers: { crossDomain: true, 'Content-Type': 'application/json' },\n        },\n      );\n    } catch (_) {\n      return;\n    }\n\n    return response;\n  }\n\n  async postLogin(id: string, password: string) {\n    axios.defaults.withCredentials = true;\n    var response;\n    console.log('id ; ' + id);\n    console.log('password ; ' + password);\n    try {\n      response = await client.post(\n        '/login',\n        {\n          id: id,\n          pw: password,\n        },\n        {\n          withCredentials: true,\n          headers: { crossDomain: true, 'Content-Type': 'application/json' },\n        },\n      );\n    } catch (_) {\n      alert('가입하지 않은 아이디이거나, 잘못된 비밀번호입니다.');\n      return;\n    }\n\n    return response;\n  }\n\n  async getLogout() {\n    axios.defaults.withCredentials = true;\n    var response;\n    try {\n      response = await client.get('/logout', {\n        withCredentials: true,\n        headers: { crossDomain: true, 'Content-Type': 'application/json' },\n      });\n    } catch (_) {\n      alert('로그아웃에 실패했습니다.');\n      return;\n    }\n\n    return true;\n  }\n}\n\nclass UserFakeProvider {\n  constructor() {}\n\n  getAdminUser(): string {\n    return `[\n                    {\n                        \"id\": \"string\",\n                        \"user_quota\": {\n                            \"instance\": 1,\n                            \"cpu\": 2,\n                            \"memmory\": 3,\n                            \"nvidia_gpu\": 4,\n                            \"storage\": 5\n                        },\n                        \"group_quota\": {\n                            \"instance\": 6,\n                            \"cpu\": 7,\n                            \"memmory\": 8,\n                            \"nvidia_gpu\": 9,\n                            \"storage\": 10\n                        }\n                    }\n                ]`;\n  }\n\n  getUser(): string {\n    return `[\n                    {\n                        \"id\": \"string\",\n                        \"user_quota\": {\n                            \"instance\": 1,\n                            \"cpu\": 2,\n                            \"memmory\": 3,\n                            \"nvidia_gpu\": 4,\n                            \"storage\": 5\n                        },\n                        \"group_quota\": {\n                            \"instance\": 6,\n                            \"cpu\": 7,\n                            \"memmory\": 8,\n                            \"nvidia_gpu\": 9,\n                            \"storage\": 10\n                        }\n                    }\n                ]`;\n  }\n}\n","/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/model/UserInfo.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Dashboard/Container/InstanceContainer.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/model/Template.tsx",[],"/Users/jang-wonpyo/workplace/sidejobs/jupynetes/client/web/src/pages/Login/Components/LoginForm.tsx",["209","210"],{"ruleId":"211","severity":1,"message":"212","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":16},{"ruleId":"211","severity":1,"message":"215","line":3,"column":17,"nodeType":"213","messageId":"214","endLine":3,"endColumn":26},{"ruleId":"211","severity":1,"message":"216","line":40,"column":12,"nodeType":"213","messageId":"214","endLine":40,"endColumn":21},{"ruleId":"211","severity":1,"message":"217","line":23,"column":7,"nodeType":"213","messageId":"214","endLine":23,"endColumn":17},{"ruleId":"211","severity":1,"message":"216","line":72,"column":12,"nodeType":"213","messageId":"214","endLine":72,"endColumn":21},{"ruleId":"211","severity":1,"message":"218","line":6,"column":10,"nodeType":"213","messageId":"214","endLine":6,"endColumn":18},{"ruleId":"211","severity":1,"message":"219","line":6,"column":20,"nodeType":"213","messageId":"214","endLine":6,"endColumn":25},{"ruleId":"211","severity":1,"message":"220","line":6,"column":27,"nodeType":"213","messageId":"214","endLine":6,"endColumn":33},{"ruleId":"211","severity":1,"message":"221","line":6,"column":35,"nodeType":"213","messageId":"214","endLine":6,"endColumn":41},{"ruleId":"211","severity":1,"message":"222","line":7,"column":8,"nodeType":"213","messageId":"214","endLine":7,"endColumn":13},{"ruleId":"211","severity":1,"message":"223","line":8,"column":8,"nodeType":"213","messageId":"214","endLine":8,"endColumn":17},{"ruleId":"211","severity":1,"message":"224","line":11,"column":7,"nodeType":"213","messageId":"214","endLine":11,"endColumn":11},{"ruleId":"211","severity":1,"message":"215","line":3,"column":17,"nodeType":"213","messageId":"214","endLine":3,"endColumn":26},{"ruleId":"211","severity":1,"message":"225","line":25,"column":7,"nodeType":"213","messageId":"214","endLine":25,"endColumn":33},{"ruleId":"226","severity":1,"message":"227","line":69,"column":38,"nodeType":"228","endLine":69,"endColumn":41},{"ruleId":"211","severity":1,"message":"229","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":24},{"ruleId":"230","severity":1,"message":"231","line":45,"column":5,"nodeType":"232","messageId":"233","endLine":45,"endColumn":20},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"211","severity":1,"message":"215","line":1,"column":17,"nodeType":"213","messageId":"214","endLine":1,"endColumn":26},{"ruleId":"211","severity":1,"message":"238","line":6,"column":8,"nodeType":"213","messageId":"214","endLine":6,"endColumn":16},{"ruleId":"211","severity":1,"message":"217","line":23,"column":7,"nodeType":"213","messageId":"214","endLine":23,"endColumn":17},{"ruleId":"211","severity":1,"message":"239","line":30,"column":7,"nodeType":"213","messageId":"214","endLine":30,"endColumn":21},{"ruleId":"211","severity":1,"message":"216","line":35,"column":10,"nodeType":"213","messageId":"214","endLine":35,"endColumn":19},{"ruleId":"211","severity":1,"message":"229","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":24},{"ruleId":"211","severity":1,"message":"240","line":6,"column":7,"nodeType":"213","messageId":"214","endLine":6,"endColumn":13},{"ruleId":"230","severity":1,"message":"231","line":50,"column":3,"nodeType":"232","messageId":"233","endLine":50,"endColumn":19},{"ruleId":"211","severity":1,"message":"241","line":90,"column":7,"nodeType":"213","messageId":"214","endLine":90,"endColumn":15},{"ruleId":"211","severity":1,"message":"242","line":102,"column":7,"nodeType":"213","messageId":"214","endLine":102,"endColumn":25},{"ruleId":"230","severity":1,"message":"231","line":103,"column":3,"nodeType":"232","messageId":"233","endLine":103,"endColumn":19},{"ruleId":"211","severity":1,"message":"243","line":9,"column":8,"nodeType":"213","messageId":"214","endLine":9,"endColumn":12},{"ruleId":"211","severity":1,"message":"244","line":50,"column":7,"nodeType":"213","messageId":"214","endLine":50,"endColumn":27},{"ruleId":"211","severity":1,"message":"225","line":52,"column":7,"nodeType":"213","messageId":"214","endLine":52,"endColumn":33},{"ruleId":"211","severity":1,"message":"245","line":65,"column":9,"nodeType":"213","messageId":"214","endLine":65,"endColumn":16},{"ruleId":"211","severity":1,"message":"246","line":110,"column":11,"nodeType":"213","messageId":"214","endLine":110,"endColumn":16},{"ruleId":"211","severity":1,"message":"247","line":114,"column":11,"nodeType":"213","messageId":"214","endLine":114,"endColumn":15},{"ruleId":"211","severity":1,"message":"248","line":1,"column":30,"nodeType":"213","messageId":"214","endLine":1,"endColumn":39},{"ruleId":"211","severity":1,"message":"249","line":5,"column":22,"nodeType":"213","messageId":"214","endLine":5,"endColumn":28},{"ruleId":"211","severity":1,"message":"250","line":5,"column":30,"nodeType":"213","messageId":"214","endLine":5,"endColumn":35},{"ruleId":"211","severity":1,"message":"251","line":8,"column":9,"nodeType":"213","messageId":"214","endLine":8,"endColumn":14},{"ruleId":"211","severity":1,"message":"252","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":14},{"ruleId":"211","severity":1,"message":"253","line":5,"column":10,"nodeType":"213","messageId":"214","endLine":5,"endColumn":22},{"ruleId":"211","severity":1,"message":"218","line":6,"column":10,"nodeType":"213","messageId":"214","endLine":6,"endColumn":18},{"ruleId":"211","severity":1,"message":"219","line":6,"column":20,"nodeType":"213","messageId":"214","endLine":6,"endColumn":25},{"ruleId":"211","severity":1,"message":"220","line":6,"column":27,"nodeType":"213","messageId":"214","endLine":6,"endColumn":33},{"ruleId":"211","severity":1,"message":"221","line":6,"column":35,"nodeType":"213","messageId":"214","endLine":6,"endColumn":41},{"ruleId":"211","severity":1,"message":"222","line":7,"column":8,"nodeType":"213","messageId":"214","endLine":7,"endColumn":13},{"ruleId":"211","severity":1,"message":"223","line":8,"column":8,"nodeType":"213","messageId":"214","endLine":8,"endColumn":17},{"ruleId":"211","severity":1,"message":"224","line":11,"column":7,"nodeType":"213","messageId":"214","endLine":11,"endColumn":11},{"ruleId":"211","severity":1,"message":"216","line":32,"column":10,"nodeType":"213","messageId":"214","endLine":32,"endColumn":19},{"ruleId":"211","severity":1,"message":"254","line":32,"column":21,"nodeType":"213","messageId":"214","endLine":32,"endColumn":33},{"ruleId":"211","severity":1,"message":"255","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":16},{"ruleId":"211","severity":1,"message":"241","line":90,"column":7,"nodeType":"213","messageId":"214","endLine":90,"endColumn":15},{"ruleId":"230","severity":1,"message":"231","line":104,"column":3,"nodeType":"232","messageId":"233","endLine":104,"endColumn":19},{"ruleId":"211","severity":1,"message":"256","line":7,"column":7,"nodeType":"213","messageId":"214","endLine":7,"endColumn":13},{"ruleId":"211","severity":1,"message":"251","line":9,"column":9,"nodeType":"213","messageId":"214","endLine":9,"endColumn":14},"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'modalText' is assigned a value but never used.","'tailLayout' is assigned a value but never used.","'Redirect' is defined but never used.","'Route' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Login' is defined but never used.","'Dashboard' is defined but never used.","'hist' is assigned a value but never used.","'statusStyle' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ServerResponse' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-native-reassign",["257"],"no-negated-in-lhs",["258"],"'Password' is defined but never used.","'onFinishFailed' is assigned a value but never used.","'isTest' is assigned a value but never used.","'response' is assigned a value but never used.","'ServerFakeProvider' is defined but never used.","'Icon' is defined but never used.","'style' is assigned a value but never used.","'history' is assigned a value but never used.","'index' is assigned a value but never used.","'text' is assigned a value but never used.","'useEffect' is defined but never used.","'Layout' is defined but never used.","'Space' is defined but never used.","'Title' is assigned a value but never used.","'Card' is defined but never used.","'ServerObject' is defined but never used.","'setModalText' is assigned a value but never used.","'assert' is defined but never used.","'styles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]